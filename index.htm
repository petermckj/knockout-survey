<html>
	<head>
		<title></title>
		
	</head>
	<body>
		<fieldset>
			<div id="error" data-bind="text: errorMessage"></div>
			<div id="question-view" data-bind="with: currentQuestion">
				
				<span data-bind="text: questionNumber">
				</span>.
				<span data-bind="text: questionText">
				</span>
				<br />
				<ul id="answer-view" data-bind="template: {name: 'answersTemplate', foreach: answers, as: 'answer'}">
				</ul>
				<select name="selType" data-bind="value: selectedAnswer, options: answers, optionsText: 'answerText'">
				</select>
			</div>
			<div id="button-view">
				<button data-bind="click: previousQuestion">Previous Question</button>
				<button data-bind="click: nextQuestion, visible: isFinished()">Next Question</button>
				<button data-bind="click: finishSurvey, visible: (isFinished() ? false : true)">Finish Survey</button>
			</div>
		</fieldset>
		<script type="text/html" id="answersTemplate">
			<li>
				<input id="answersGroup" name="answersGroup" type="radio" data-bind="value: answerText,checked: $parent.currentSelectedAnswerText()" />
				<label data-bind="text: answerText"></label>
			</li>
		</script>
		<script src="js/knockout-latest.debug.js" type="text/javascript" charset="utf-8"></script>
		<script>
			window.survey ={};
			
			(function (survey) {
				function Answer(){
					var self = this;
					self.answerId = ko.observable(0);
					self.answerText = ko.observable("answer lorem ipsem");
					return self;
				}
				survey.Answer = Answer;
			})(window.survey);
			
			(function (survey) {
				function Question(){
					var self = this;
					self.questionNumber = ko.observable(0);
					self.questionType = ko.observable("multiple");
					self.questionText = ko.observable("lorem ipsem");
					self.selectedAnswer = ko.observable(null);
					self.currentSelectedAnswerText = ko.computed(function(){
						if(self.selectedAnswer()){
							return self.selectedAnswer().answerText();
						}else{
							return null;
						}
					});
					self.answers = ko.observableArray([
						new survey.Answer().answerText("please select").answerId(0),
						new survey.Answer().answerText("test").answerId(1),
						new survey.Answer().answerText("test 2").answerId(2)
					]);
					return self;
				}
				survey.Question = Question;
			})(window.survey);
			
			(function (survey){
				function SurveyViewModel(){
					var self = this;
					self.userID = 1; //should be assigned on load somehow
					self.questions = ko.observableArray([]);
					self.currentQuestion = ko.observable(null);
					self.errorMessage = ko.observable(null);
					self.setUserID = function(uid){
						self.userID = uid;
					};
					
					self.isFinished = ko.computed(function(){
						var index = self.questions().indexOf(self.currentQuestion());
						return (index+1 < self.questions().length);
					});
					
					self.nextQuestion = function(){
						//do some validation here
						if(self.currentQuestion().selectedAnswer().answerId()===0){
							self.errorMessage("Please select an answer");
							return;
						}
						self.errorMessage(null);
						
						//should send users response to server to be stored
						//or maybe put in local storage
						//does knockout do that for us anyway?
						//$.POST(...);
						
						//find our current question in the array
						var index = self.questions().indexOf(self.currentQuestion());
						if(index+1 < self.questions().length){
							self.currentQuestion(self.questions()[index+1]);
						}
					}
					
					/*
					*
					TODO
					Need to somehow switch templates based on the type of question that is 
					being shown eg multi-choice, single choice etc.
					*
					*/
					
					/*
					*
					TODO
					Need to add routing logic based on previous answers.
					*
					*/
					
					self.previousQuestion = function(){
						var index = self.questions().indexOf(self.currentQuestion());
						if(index > 0){
							self.currentQuestion(self.questions()[index-1]);
						}
					}
					
					self.finishSurvey = function(){
						for(var i = 0; i < self.questions().length; i++){
							var q = self.questions()[i];
							console.log(q.questionNumber() + ":" + q.selectedAnswer().answerText());
						}
						//this function should validate and submit responses
						//to server using AJAX / JSON
					}
					
					self.addQuestion = function(question){
						self.questions.push(question);
						self.currentQuestion(question);
					}
					
					self.addQuestions = function(questionsToAdd){
						for(var i = 0; i < questionsToAdd.length; i++){
							self.questions.push(questionsToAdd[i]);
						}
						self.currentQuestion(questionsToAdd[0]);
					}
				}
				survey.SurveyViewModel = SurveyViewModel;
			})(window.survey);
			
			var ViewModel = new survey.SurveyViewModel();
			
			//load survey in via JSON
			//foreach(question q in questions)...
			//load from mongodb document db
			var q = new survey.Question().questionText('super').questionNumber(1);
			var q2 = new survey.Question().questionText('smashing').questionNumber(2);
			var q3 = new survey.Question().questionText('great').questionNumber(3);
			ViewModel.addQuestions([q,q2,q3]);
			
			ko.applyBindings(ViewModel);
			
		</script>
	</body>
</html>